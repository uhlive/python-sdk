---
version: 2.1

workflows:
  version: 2
  build:
    jobs:
      - tests:
          matrix:
            parameters:
              version:
                - "3.7"
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
                - "3.12"
                - "3.13"
      - deploy:
          context: pypi
          requires:
            - tests
          filters:
            branches:
              only: release

jobs:
  tests:
    parameters:
      version:
        description: "version tag"
        default: "3.12"
        type: string
    docker:
      - image: cimg/python:<<parameters.version>>

    working_directory: ~/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - <<parameters.version>>-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
            - <<parameters.version>>-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "setup.py" }}-
            - <<parameters.version>>-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - <<parameters.version>>-{{ .Environment.CACHE_VERSION }}-

      - run:
          name: install requirements
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install tox
            pip install -e .[examples]
            tox --notest  # Install all tox dependencies

      - save_cache:
          paths:
            - venv
            - .tox
          key: <<parameters.version>>-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}

      - run:
          name: run linters
          command: |
            . venv/bin/activate
            tox -e mypy,linter

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox -e py3

  deploy:
    resource_class: small
    docker:
      - image: cimg/python:3.12

    working_directory: ~/uhlive

    steps:
      - checkout

      - run:
          name: init .pypirc and build env
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -U pip
            pip install wheel twine build
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc

      - run:
          name: create packages
          command: |
            . venv/bin/activate
            python -m build

      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*
